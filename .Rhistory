G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.3,cens = TRUE)
res = Parameters_estimation(df,"CompRisk")
expect_equal(length(res$beta), n_cov)
expect_lte(abs(res$beta[1] - 1), 1)
expect_lte(abs(res$beta[2] - 1.2), 1)
n_cov = 2
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n * n_cov, 0, 1), ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1, 1.2),theta = 0.6,cens = TRUE)
res = Parameters_estimation(df, "Cox_frailty")
expect_equal(length(res$beta), n_cov)
expect_equal(length(res$theta), 1)
expect_equal(length(res$u), n_cluster)
expect_lte(abs(res$beta[1] - 1), 1)
expect_lte(abs(res$beta[2] - 1.2), 1)
expect_lte(abs(res$theta - 0.3), 1)
n_cov = 2
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.3,cens = TRUE)
res = Parameters_estimation(df,"Cox")
expect_equal(length(res$beta),n_cov)
expect_lte(abs(res$beta[1]-1),1)
expect_lte(abs(res$beta[2]-1.2),1)
})
test_that("Parameters_estimation works", {
set.seed(123)
suppressMessages({
expect_error(Parameters_estimation(1,"Clearly a wrong method"),"The method chosen must be : 'CompRisk_frailty','CompRisk','Cox_frailty' or 'Cox'.")
n_cov = 2
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.3,cens = TRUE)
df_bis = data.frame(status = df$status,clusters = df$clusters,as.matrix(df[,4:length(df[1,])]))
expect_error(Parameters_estimation(df_bis),"")
n_cov = 2
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.3,cens = TRUE)
res = Parameters_estimation(df,"CompRisk_frailty")
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$beta[1]-1),1)
expect_lte(abs(res$beta[2]-1.2),1)
expect_lte(abs(res$theta - 0.3),1)
n_cov = 2
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.3,cens = TRUE)
res = Parameters_estimation(df,"CompRisk")
expect_equal(length(res$beta), n_cov)
expect_lte(abs(res$beta[1] - 1), 1)
expect_lte(abs(res$beta[2] - 1.2), 1)
n_cov = 2
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n * n_cov, 0, 1), ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1, 1.2),theta = 0.6,cens = TRUE)
res = Parameters_estimation(df, "Cox_frailty")
expect_equal(length(res$beta), n_cov)
expect_equal(length(res$theta), 1)
expect_equal(length(res$u), n_cluster)
expect_lte(abs(res$beta[1] - 1), 1)
expect_lte(abs(res$beta[2] - 1.2), 1)
expect_lte(abs(res$theta - 0.3), 1)
n_cov = 2
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.3,cens = TRUE)
res = Parameters_estimation(df,"Cox")
expect_equal(length(res$beta),n_cov)
expect_lte(abs(res$beta[1]-1),1)
expect_lte(abs(res$beta[2]-1.2),1)
})
})
test_that("Parameters_estimation works", {
set.seed(123)
suppressMessages({
expect_error(Parameters_estimation(1,"Clearly a wrong method"),"The method chosen must be : 'CompRisk_frailty','CompRisk','Cox_frailty' or 'Cox'.")
n_cov = 2
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.3,cens = TRUE)
df_bis = data.frame(status = df$status,clusters = df$clusters,as.matrix(df[,4:length(df[1,])]))
expect_error(Parameters_estimation(df_bis),"")
n_cov = 2
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.3,cens = TRUE)
expect_error(Parameters_estimation(df,"CompRisk",cluster_censoring = TRUE),"'cluster_censoring' is only for 'CompRisk_frailty' method.")
n_cov = 2
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.3,cens = TRUE)
res = Parameters_estimation(df,"CompRisk_frailty")
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$beta[1]-1),1)
expect_lte(abs(res$beta[2]-1.2),1)
expect_lte(abs(res$theta - 0.3),1)
n_cov = 2
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.3,cens = TRUE)
res = Parameters_estimation(df,"CompRisk")
expect_equal(length(res$beta), n_cov)
expect_lte(abs(res$beta[1] - 1), 1)
expect_lte(abs(res$beta[2] - 1.2), 1)
n_cov = 2
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n * n_cov, 0, 1), ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1, 1.2),theta = 0.6,cens = TRUE)
res = Parameters_estimation(df, "Cox_frailty")
expect_equal(length(res$beta), n_cov)
expect_equal(length(res$theta), 1)
expect_equal(length(res$u), n_cluster)
expect_lte(abs(res$beta[1] - 1), 1)
expect_lte(abs(res$beta[2] - 1.2), 1)
expect_lte(abs(res$theta - 0.3), 1)
n_cov = 2
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.3,cens = TRUE)
res = Parameters_estimation(df,"Cox")
expect_equal(length(res$beta),n_cov)
expect_lte(abs(res$beta[1]-1),1)
expect_lte(abs(res$beta[2]-1.2),1)
})
})
devtools::load_all()
devtools::document()
devtools::check()
knitr::opts_chunk$set(echo = TRUE)
library(survival)
library(multicenterCompRisk)
devtools::install()
library(survival)
library(multicenterCompRisk)
compute_mean_mse <- function(df, true_values) {
if (!is.data.frame(df)) stop("L'entrée doit être un data.frame.")
if (!is.numeric(true_values)) stop("true_values doit être un vecteur numérique.")
if (ncol(df) != length(true_values)) {
stop("Le nombre de colonnes du data.frame doit correspondre à la longueur de true_values.")
}
means <- colMeans(df, na.rm = TRUE)
true_mat <- matrix(rep(true_values, each = nrow(df)), nrow = nrow(df), byrow = FALSE)
mse <- colMeans((df - true_mat)^2, na.rm = TRUE)
result <- data.frame(
variable = colnames(df),
true_value = true_values,
mean = means,
mse = mse
)
return(result)
}
generate_full_table <- function(
beta_vec,
theta_vec,
N_vec,
K_vec,
n_sim = 100,
pcens = 0.25
) {
iter <- 1
n_iter <- n_sim * length(N_vec) * length(K_vec) * length(theta_vec) * length(beta_vec)
full_results <- list()
idx <- 1
suppressWarnings(suppressMessages({
for (theta in theta_vec) {
for (beta in beta_vec) {
beta_clean <- as.numeric(beta)
n_cov <- length(beta_clean)
for (N in N_vec) {
for (K in K_vec) {
n_per_cluster <- N / K
config_id <- paste0("gamma=", paste(beta_clean, collapse = ","),
"  theta=", theta,
"  N=", N,
"  K=", K)
cat("Starting :", config_id, "\n")
results_1 <- matrix(NA, nrow = n_sim, ncol = n_cov)
results_2 <- rep(NA, n_sim)
for (i in 1:n_sim) {
cat("iteration", iter, "out of", n_iter, "\n")
G <- rep(1:K, each = n_per_cluster)
Z <- if (n_cov == 0) matrix(0, N, 0) else matrix(runif(N * n_cov, 0, 1), ncol = n_cov)
df <- simulate_data(G, Z, prop = 0.6, beta = beta_clean, theta = theta,
cens = TRUE, pcens = pcens, tau = 0.5)
check_data_format(df)
res <- tryCatch(
Reml_CompRisk_frailty(df),
error = function(e) return(NULL)
)
if (!is.null(res)) {
if (n_cov > 0) {
results_1[i, ] <- res$beta
}
results_2[i] <- res$theta
}
iter <- iter + 1
}
mean_gamma_hat <- c()
mse_gamma_hat <- c()
gamma_vals <- c()
if (n_cov > 0) {
mean_gamma_hat <- colMeans(results_1, na.rm = TRUE)
mse_gamma_hat <- colMeans((results_1 - matrix(rep(beta, each = n_sim), nrow = n_sim))^2, na.rm = TRUE)
}
mean_theta_hat <- mean(results_2, na.rm = TRUE)
mse_theta_hat <- mean((results_2 - rep(theta, n_sim))^2, na.rm = TRUE)
gamma_data <- tibble(
gamma = list(beta),
mean_gamma_hat = list(mean_gamma_hat),
mse_gamma_hat = list(mse_gamma_hat)
)
full_results[[idx]] <- bind_cols(
tibble(
N = N,
K = K,
theta = theta,
mean_theta_hat = mean_theta_hat,
mse_theta_hat = mse_theta_hat
),
gamma_data
)
idx <- idx + 1
cat("Finished :", config_id, "\n")
}
}
}
}
}))
final_df <- do.call(rbind, full_results)
return(list(final_df = final_df,beta_vec = beta_vec))
}
big_table <- generate_full_table(beta_vec = list(a=c(0),b=c(0.375),d = c(1,1.2)),e=c(0,-1,1.3,-0.4),f=c(0.5,0,1,0.2,-1.2,-0.4,0,0.8,-0.3,-0.2), theta_vec = c(0, 0.1, 0.6), N_vec = c(200, 500), K_vec = c(5, 20), n_sim = 200, pcens = 0.25)
n_cov = 2
n_per_cluster = 20
n_cluster = 15
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.3,cens = TRUE)
generate_full_table <- function(
beta_vec,
theta_vec,
N_vec,
K_vec,
n_sim = 100,
pcens = 0.25
) {
iter <- 1
n_iter <- n_sim * length(N_vec) * length(K_vec) * length(theta_vec) * length(beta_vec)
full_results <- list()
idx <- 1
suppressWarnings(suppressMessages({
for (theta in theta_vec) {
for (beta in beta_vec) {
beta_clean <- as.numeric(beta)
n_cov <- length(beta_clean)
for (N in N_vec) {
for (K in K_vec) {
n_per_cluster <- N / K
config_id <- paste0("gamma=", paste(beta_clean, collapse = ","),
"  theta=", theta,
"  N=", N,
"  K=", K)
cat("Starting :", config_id, "\n")
results_1 <- matrix(NA, nrow = n_sim, ncol = n_cov)
results_2 <- rep(NA, n_sim)
for (i in 1:n_sim) {
cat("iteration", iter, "out of", n_iter, "\n")
G <- rep(1:K, each = n_per_cluster)
Z <- if (n_cov == 0) matrix(0, N, 0) else matrix(runif(N * n_cov, 0, 1), ncol = n_cov)
df <- simulate_data(G, Z, prop = 0.6, beta = beta_clean, theta = theta,
cens = TRUE, pcens = pcens, tau = 0.5)
check_data_format(df)
res <- tryCatch(
Reml_CompRisk_frailty(df),
error = function(e) return(NULL)
)
if (!is.null(res)) {
if (n_cov > 0) {
results_1[i, ] <- res$beta
}
results_2[i] <- res$theta
}
iter <- iter + 1
}
mean_gamma_hat <- c()
mse_gamma_hat <- c()
gamma_vals <- c()
if (n_cov > 0) {
mean_gamma_hat <- colMeans(results_1, na.rm = TRUE)
mse_gamma_hat <- colMeans((results_1 - matrix(rep(beta, each = n_sim), nrow = n_sim))^2, na.rm = TRUE)
}
mean_theta_hat <- mean(results_2, na.rm = TRUE)
mse_theta_hat <- mean((results_2 - rep(theta, n_sim))^2, na.rm = TRUE)
gamma_data <- tibble(
gamma = list(beta),
mean_gamma_hat = list(mean_gamma_hat),
mse_gamma_hat = list(mse_gamma_hat)
)
full_results[[idx]] <- bind_cols(
tibble(
N = N,
K = K,
theta = theta,
mean_theta_hat = mean_theta_hat,
mse_theta_hat = mse_theta_hat
),
gamma_data
)
idx <- idx + 1
cat("Finished :", config_id, "\n")
}
}
}
}
}))
final_df <- do.call(rbind, full_results)
return(list(final_df = final_df,beta_vec = beta_vec))
}
big_table <- generate_full_table(beta_vec = list(a=c(0),b=c(0.375),d = c(1,1.2),e=c(0,-1,1.3,-0.4),f=c(0.5,0,1,0.2,-1.2,-0.4,0,0.8,-0.3,-0.2)), theta_vec = c(0, 0.1, 0.6), N_vec = c(200, 500), K_vec = c(5, 20), n_sim = 200, pcens = 0.25)
n_cov = 2
n_per_cluster = 20
n_cluster = 15
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.3,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty")
n_cov = 2
n_per_cluster = 20
n_cluster = 15
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.01,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty")
n_cov = 2
n_per_cluster = 20
n_cluster = 15
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty")
n_cov = 2
n_per_cluster = 20
n_cluster = 15
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty")
n_cov = 2
n_per_cluster = 20
n_cluster = 15
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty")
n_cov = 2
n_per_cluster = 20
n_cluster = 15
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty")
n_cov = 2
n_per_cluster = 20
n_cluster = 15
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.2,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty")
n_cov = 2
n_per_cluster = 20
n_cluster = 15
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.2,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty")
devtools::check()
devtools::load_all()
devtools::test()
devtools::load_all()
devtools::test()
devtools::document()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::check()
devtools::install()
?pchisq
devtoools::load_all()
devtools::load_all()
knitr::opts_chunk$set(echo = TRUE)
n_cov = 2
n_per_cluster = 20
n_cluster = 15
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.2,cens = TRUE)
n_cov = 2
n_per_cluster = 20
n_cluster = 15
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty")
Parameters_estimation(df,method = "CompRisk_frailty")
Parameters_estimation(df,method = "CompRisk_frailty")
Parameters_estimation(df,method = "CompRisk_frailty")
n_cov = 2
n_per_cluster = 20
n_cluster = 15
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty")
n_cov = 2
n_per_cluster = 20
n_cluster = 15
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty")
n_cov = 2
n_per_cluster = 20
n_cluster = 15
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty")
devtools::load_all()
install.packages("survival")
devtools::install("C:/Users/delbe/Total/TRAVAIL/Informatique/Stage Inria/MulticenterCompRisk")
devtools::install("C:/Users/delbe/Total/TRAVAIL/Informatique/Stage Inria/FrailtyCompRisk")
library(survival)
library(multicenterCompRisk)
library(survival)
knitr::opts_chunk$set(echo = TRUE)
install.packages("survival")
devtools::install("C:/Users/delbe/Total/TRAVAIL/Informatique/Stage Inria/FrailtyCompRisk")
library(survival)
library(FrailtyCompRisk)
n_cov = 2
n_per_cluster = 20
n_cluster = 15
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty")
devtools::load_all()
devtools::install("C:/Users/delbe/Total/TRAVAIL/Informatique/Stage Inria/FrailtyCompRisk")
library(survival)
library(FrailtyCompRisk)
