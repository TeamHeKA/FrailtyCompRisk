})
test_that("Reml_CompRisk_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.3,cens = TRUE)
res = Reml_CompRisk_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.3),0.5)
})
test_that("Reml_CompRisk_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.3,cens = TRUE)
res = Reml_CompRisk_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.3),0.5)
})
test_that("Reml_CompRisk_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.3,cens = TRUE)
res = Reml_CompRisk_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.3),0.5)
})
test_that("Reml_CompRisk_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.3,cens = TRUE)
res = Reml_CompRisk_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.3),0.5)
})
test_that("Reml_CompRisk_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.3,cens = TRUE)
res = Reml_CompRisk_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.3),0.5)
})
test_that("Reml_CompRisk_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.3,cens = TRUE)
res = Reml_CompRisk_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.3),0.5)
})
test_that("Reml_CompRisk_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.3,cens = TRUE)
res = Reml_CompRisk_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.3),0.5)
})
test_that("Reml_CompRisk_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.3,cens = TRUE)
res = Reml_CompRisk_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.3),0.5)
})
test_that("Reml_CompRisk_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.3,cens = TRUE)
res = Reml_CompRisk_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.3),0.5)
})
test_that("Reml_CompRisk_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.3,cens = TRUE)
res = Reml_CompRisk_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.3),0.5)
})
test_that("Reml_CompRisk_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.3,cens = TRUE)
res = Reml_CompRisk_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.3),0.5)
})
test_that("Reml_CompRisk_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.3,cens = TRUE)
res = Reml_CompRisk_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.3),0.5)
})
test_that("Reml_Cox_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.6,cens = TRUE)
res = Reml_Cox_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.6),0.5)
})
test_that("Reml_Cox_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.6,cens = TRUE)
res = Reml_Cox_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.6),0.5)
})
test_that("Reml_Cox_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.6,cens = TRUE)
res = Reml_Cox_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.6),0.5)
})
test_that("Reml_Cox_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.6,cens = TRUE)
res = Reml_Cox_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.6),0.5)
})
test_that("Reml_Cox_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.6,cens = TRUE)
res = Reml_Cox_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.6),0.5)
})
test_that("Reml_Cox_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.6,cens = TRUE)
res = Reml_Cox_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.6),0.5)
})
test_that("Reml_Cox_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.6,cens = TRUE)
res = Reml_Cox_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.6),0.5)
})
test_that("Reml_Cox_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.6,cens = TRUE)
res = Reml_Cox_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.6),0.5)
})
test_that("Reml_Cox_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.6,cens = TRUE)
res = Reml_Cox_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.6),0.5)
})
test_that("Reml_Cox_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.6,cens = TRUE)
res = Reml_Cox_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.6),0.5)
})
test_that("Reml_Cox_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.6,cens = TRUE)
res = Reml_Cox_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.6),0.5)
})
test_that("Reml_Cox_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.6,cens = TRUE)
res = Reml_Cox_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.6),0.5)
})
test_that("Reml_Cox_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.6,cens = TRUE)
res = Reml_Cox_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.6),0.5)
})
test_that("Reml_Cox_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.6,cens = TRUE)
res = Reml_Cox_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.6),0.5)
})
devtools::load_all()
devtools::document()
devtools::check()
devtools::load_all()
devtools::check()
test_that("Reml_CompRisk_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.3,cens = TRUE)
res = Reml_CompRisk_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.3),0.5)
})
test_that("Reml_CompRisk_frailty works without covariables", {
n_cov = 0
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(),theta = 0.3,cens = TRUE)
res = Reml_CompRisk_frailty(df)
expect_equal(length(res$beta),n_cov)
expect_equal(length(res$theta),1)
expect_equal(length(res$u),n_cluster)
expect_lte(abs(res$theta - 0.3),0.5)
})
devtools::check()
devtools::load_all()
devtools::document()
devtools::check()
?multicenterCompRisk
browseVignettes("multicenterCompRisk")
devtools::build_vignettes()
browseVignettes("multicenterCompRisk")
library(multicenterCompRisk)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(multicenterCompRisk)
browseVignettes("multicenterCompRisk")
?Parameters_estimation
Simulate data set.seed(123) data
set.seed(123)
simulate_data(N = 300, K =10, theta = 0.5)
set.seed(123)
n_cov = 2
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.6,cens = TRUE)
#Estimate using REML with frailty
res <- Reml_CompRisk_frailty(df)
#Print estimated coefficients
res$beta
res$theta
set.seed(123)
n_cov = 2
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.6,cens = TRUE)
#Estimate using REML with frailty
res <- Reml_CompRisk_frailty(df)
#Print estimated coefficients
res$beta
res$theta
set.seed(123)
n_cov = 2
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.6,cens = TRUE)
#Estimate using REML with frailty
res <- Reml_CompRisk_frailty(df)
#Print estimated coefficients
res$beta
res$theta
set.seed(123)
n_cov = 2
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.6,cens = TRUE)
#Estimate using REML with frailty
res <- Reml_CompRisk_frailty(df)
#Print estimated coefficients
res$beta
res$theta
set.seed(12)
n_cov = 2
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.6,cens = TRUE)
#Estimate using REML with frailty
res <- Reml_CompRisk_frailty(df)
#Print estimated coefficients
res$beta
res$theta
set.seed(123)
n_cov = 2
n_per_cluster = 15
n_cluster = 20
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.6,cens = TRUE)
#Estimate using REML with frailty
res <- Reml_CompRisk_frailty(df)
#Print estimated coefficients
res$beta
res$theta
devtools::document()
devtools::check()
browseVignettes("multicenterCompRisk")
devtools::build_vignettes()
browseVignettes("multicenterCompRisk")
devtools::clean_dll()
devtools::document()
devtools::build_vignettes()
devtools::build()
browseVignettes("multicenterCompRisk")
remove.packages("multicenterCompRisk")
devtools::install(build_vignettes = TRUE)
browseVignettes("multicenterCompRisk")
devtools::clean_dll()
devtools::document()
remove.packages("multicenterCompRisk")
devtools::clean_dll()
