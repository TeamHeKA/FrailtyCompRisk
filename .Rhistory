citation(""FrailtyCompRisk"")
citation("FrailtyCompRisk")
devtools::load_all()
devtools::docuùent()
devtools::document()
devtools::check()
devtools::load_all()
devtools::check()
devtools::document()
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::test()
devtools::document()
devtools::load_all()
vignette("FrailtyCompRisk")
vignette("Test_Kats")
vignette("Tests_Kats")
Multi_tests = function(N_test,
n_cov,
n_cluster,
n_per_cluster,
a1,
b1)
{
n = n_cluster * n_per_cluster
results <- data.frame(matrix(NA, nrow = N_test, ncol = (n_cov)))
if (n_cov > 0) {
colnames(results) <- paste0("beta", 1:n_cov)
} else{
stop("Covariables missing")
}
for (i in 1:N_test)
{
G <- rep(1:n_cluster, each = n_per_cluster)
if (n_cov == 0) {
Z <- matrix(0, n, 0)
} else {
Z <- matrix(runif(n * n_cov, a1, b1), ncol = n_cov)
}
df = simulate_data(
G,
Z,
prop = 0.6,
beta = c(0, 0.25, 0.12, 0.33, 0.24, 1, -0.2, -0.35),
theta = 0,
cens = TRUE,
pcens = 0.25,
tau = 0.5
)
df = data.frame(times = df$times, status = df$status,clusters = rep(1,length(G)),as.matrix(df[,4:(n_cov + 3)]))
ind <- which(df$status > 1)
df$status[ind] <- 1
res <- tryCatch(
Ml_Cox(df),
error = function(e) {
message("Erreur à l’itération ", i, " : ", e$message)
return(NULL)
}
)
if (!is.null(res)) {
if (n_cov > 0) {
results[i, 1:n_cov] <- res$beta
}
}
}
return(results)
}
M = Multi_tests(N_test = 100,n_cov = 8,n_cluster = 20,n_per_cluster = 25,a1 = 0,b1=1)
m = compute_mean_mse(M, c(0, 0.25, 0.12, 0.33, 0.24, 1, -0.2, -0.35))
m
Multi_tests = function(N_test,
n_cov,
n_cluster,
n_per_cluster,
a1,
b1)
{
n = n_cluster * n_per_cluster
results <- data.frame(matrix(NA, nrow = N_test, ncol = (n_cov + 1)))
if (n_cov > 0) {
colnames(results) <- c(paste0("beta", 1:n_cov), "theta_hat")
} else{
colnames(results) <- "theta_hat"
}
for (i in 1:N_test)
{
G <- rep(1:n_cluster, each = n_per_cluster)
if (n_cov == 0) {
Z <- matrix(0, n, 0)
} else {
Z <- matrix(runif(n * n_cov, a1, b1), ncol = n_cov)
}
df = simulate_data(
G,
Z,
prop = 0.6,
beta = c(0, 0.25, 0.12, 0.33, 0.24, 1, -0.2, -0.35),
theta = 0,
cens = TRUE,
pcens = 0.25,
tau = 0.5
)
check_data_format(df)
res <- tryCatch(
Reml_Cox_frailty(df, max_iter = 100),
error = function(e) {
message("Erreur à l’itération ", i, " : ", e$message)
return(NULL)
}
)
if (is.null(res)) {
res_bis <- tryCatch(
Ml_Cox(df, max_iter = 100),
error = function(e) {
message("Erreur à l’itération ", i, " : ", e$message)
return(NULL)})
res <- list(beta = res_bis$beta,theta = 0)
}
cat("res$beta", res$beta,"res$theta", res$theta,"\n")
if (!is.null(res)) {
if (n_cov > 0) {
results[i, 1:n_cov] <- res$beta
results[i, "theta_hat"] <- res$theta
} else{
results[i, "theta_hat"] <- res$theta
}
}
}
return(results)
}
M = Multi_tests(N_test = 100,n_cov = 8,n_cluster = 15, n_per_cluster = 20,a1 = 0,b1 = 1)
Multi_tests = function(N_test,
n_cov,
n_cluster,
n_per_cluster,
a1,
b1)
{
n = n_cluster * n_per_cluster
results <- data.frame(matrix(NA, nrow = N_test, ncol = (n_cov + 1)))
if (n_cov > 0) {
colnames(results) <- c(paste0("beta", 1:n_cov), "theta_hat")
} else{
colnames(results) <- "theta_hat"
}
for (i in 1:N_test)
{
G <- rep(1:n_cluster, each = n_per_cluster)
if (n_cov == 0) {
Z <- matrix(0, n, 0)
} else {
Z <- matrix(runif(n * n_cov, a1, b1), ncol = n_cov)
}
df = simulate_data(
G,
Z,
prop = 0.6,
beta = c(0, 0.25, 0.12, 0.33, 0.24, 1, -0.2, -0.35),
theta = 0,
cens = TRUE,
pcens = 0.25,
tau = 0.5
)
check_data_format(df)
res <- tryCatch(
Reml_Cox_frailty(df, max_iter = 100),
error = function(e) {
message("Erreur à l’itération ", i, " : ", e$message)
return(NULL)
}
)
if (is.null(res)) {
res_bis <- tryCatch(
Ml_Cox(df, max_iter = 100),
error = function(e) {
message("Erreur à l’itération ", i, " : ", e$message)
return(NULL)})
res <- list(beta = res_bis$beta,theta = 0)
}
if (!is.null(res)) {
if (n_cov > 0) {
results[i, 1:n_cov] <- res$beta
results[i, "theta_hat"] <- res$theta
} else{
results[i, "theta_hat"] <- res$theta
}
}
}
return(results)
}
M = Multi_tests(N_test = 100,n_cov = 8,n_cluster = 15, n_per_cluster = 20,a1 = 0,b1 = 1)
m = compute_mean_mse(M,c(0,0.25,0.12,0.33,0.24,1,-0.2,-0.35,0))
Multi_tests = function(N_test,
n_cov,
n_cluster,
n_per_cluster,
a1,
b1)
{
suppressMessages({
n = n_cluster * n_per_cluster
results <- data.frame(matrix(NA, nrow = N_test, ncol = (n_cov + 1)))
if (n_cov > 0) {
colnames(results) <- c(paste0("beta", 1:n_cov), "theta_hat")
} else{
colnames(results) <- "theta_hat"
}
for (i in 1:N_test)
{
G <- rep(1:n_cluster, each = n_per_cluster)
if (n_cov == 0) {
Z <- matrix(0, n, 0)
} else {
Z <- matrix(runif(n * n_cov, a1, b1), ncol = n_cov)
}
df = simulate_data(
G,
Z,
prop = 0.6,
beta = c(0, 0.25, 0.12, 0.33, 0.24, 1, -0.2, -0.35),
theta = 0,
cens = TRUE,
pcens = 0.25,
tau = 0.5
)
check_data_format(df)
res <- tryCatch(
Reml_Cox_frailty(df, max_iter = 100),
error = function(e) {
message("Erreur à l’itération ", i, " : ", e$message)
return(NULL)
}
)
if (is.null(res)) {
res_bis <- tryCatch(
Ml_Cox(df, max_iter = 100),
error = function(e) {
message("Erreur à l’itération ", i, " : ", e$message)
return(NULL)})
res <- list(beta = res_bis$beta,theta = 0)
}
if (!is.null(res)) {
if (n_cov > 0) {
results[i, 1:n_cov] <- res$beta
results[i, "theta_hat"] <- res$theta
} else{
results[i, "theta_hat"] <- res$theta
}
}
}
})
return(results)
}
M = Multi_tests(N_test = 100,n_cov = 8,n_cluster = 15, n_per_cluster = 20,a1 = 0,b1 = 1)
m = compute_mean_mse(M,c(0,0.25,0.12,0.33,0.24,1,-0.2,-0.35,0))
m
Multi_tests = function(N_test,
n_cov,
n_cluster,
n_per_cluster,
a1,
b1)
{
n = n_cluster * n_per_cluster
results <- data.frame(matrix(NA, nrow = N_test, ncol = (n_cov)))
if (n_cov > 0) {
colnames(results) <- paste0("beta", 1:n_cov)
} else{
stop("Covariables missing")
}
for (i in 1:N_test)
{
G <- rep(1:n_cluster, each = n_per_cluster)
if (n_cov == 0) {
Z <- matrix(0, n, 0)
} else {
Z <- matrix(runif(n * n_cov, a1, b1), ncol = n_cov)
}
df = simulate_data(
G,
Z,
prop = 0.6,
beta = c(0, 0.25, 0.12, 0.33, 0.24, 1, -0.2, -0.35),
theta = 0,
cens = TRUE,
pcens = 0.25,
tau = 0.5
)
df = data.frame(times = df$times, status = df$status, clusters = rep(1,length(G)), as.matrix(df[,4:(n_cov + 3)]))
res <- tryCatch(
Ml_CompRisk(df),
error = function(e) {
message("Erreur à l’itération ", i, " : ", e$message)
return(NULL)
}
)
if (!is.null(res)) {
if (n_cov > 0) {
results[i, 1:n_cov] <- res$beta
}
}
}
return(results)
}
M = Multi_tests(N_test = 100,n_cov = 8,n_cluster = 20,n_per_cluster = 25,a1 = 0,b1 = 1)
m = compute_mean_mse(M, c(0, 0.25, 0.12, 0.33, 0.24, 1, -0.2, -0.35))
m
Multi_tests = function(N_test,
n_cov,
n_cluster,
n_per_cluster,
a1,
b1)
{
n = n_cluster * n_per_cluster
results <- data.frame(matrix(NA, nrow = N_test, ncol = (n_cov + 1)))
if (n_cov > 0) {
colnames(results) <- c(paste0("beta", 1:n_cov), "theta_hat")
} else{
colnames(results) <- "theta_hat"
}
for (i in 1:N_test)
{
G <- rep(1:n_cluster, each = n_per_cluster)
if (n_cov == 0) {
Z <- matrix(0, n, 0)
} else {
Z <- matrix(runif(n * n_cov, a1, b1), ncol = n_cov)
}
df = simulate_data(
G,
Z,
prop = 0.6,
beta = c(0, 0.25, 0.12, 0.33, 0.24, 1, -0.2, -0.35),
theta = 0,
cens = TRUE,
pcens = 0.25,
tau = 0.5
)
check_data_format(df)
res <- tryCatch(
Reml_CompRisk_frailty(df, max_iter = 100),
error = function(e) {
message("Erreur à l’itération ", i, " : ", e$message)
return(NULL)
}
)
if (is.null(res)) {
res_bis <- tryCatch(
Ml_CompRisk(df, max_iter = 100),
error = function(e) {
message("Erreur à l’itération ", i, " : ", e$message)
return(NULL)})
res <- list(beta = res_bis$beta,theta = 0)
}
cat("res$beta", res$beta,"res$theta", res$theta,"\n")
if (!is.null(res)) {
if (n_cov > 0) {
results[i, 1:n_cov] <- res$beta
results[i, "theta_hat"] <- res$theta
} else{
results[i, "theta_hat"] <- res$theta
}
}
}
return(results)
}
M = Multi_tests(N_test = 100,n_cov = 8,n_cluster = 15, n_per_cluster = 20,a1 = 0,b1 = 1)
m = compute_mean_mse(M,c(0,0.25,0.12,0.33,0.24,1,-0.2,-0.35,0))
Multi_tests = function(N_test,
n_cov,
n_cluster,
n_per_cluster,
a1,
b1)
{
suppressMessages({
n = n_cluster * n_per_cluster
results <- data.frame(matrix(NA, nrow = N_test, ncol = (n_cov + 1)))
if (n_cov > 0) {
colnames(results) <- c(paste0("beta", 1:n_cov), "theta_hat")
} else{
colnames(results) <- "theta_hat"
}
for (i in 1:N_test)
{
G <- rep(1:n_cluster, each = n_per_cluster)
if (n_cov == 0) {
Z <- matrix(0, n, 0)
} else {
Z <- matrix(runif(n * n_cov, a1, b1), ncol = n_cov)
}
df = simulate_data(
G,
Z,
prop = 0.6,
beta = c(0, 0.25, 0.12, 0.33, 0.24, 1, -0.2, -0.35),
theta = 0,
cens = TRUE,
pcens = 0.25,
tau = 0.5
)
check_data_format(df)
res <- tryCatch(
Reml_CompRisk_frailty(df, max_iter = 100),
error = function(e) {
message("Erreur à l’itération ", i, " : ", e$message)
return(NULL)
}
)
if (is.null(res)) {
res_bis <- tryCatch(
Ml_CompRisk(df, max_iter = 100),
error = function(e) {
message("Erreur à l’itération ", i, " : ", e$message)
return(NULL)})
res <- list(beta = res_bis$beta,theta = 0)
}
cat("res$beta", res$beta,"res$theta", res$theta,"\n")
if (!is.null(res)) {
if (n_cov > 0) {
results[i, 1:n_cov] <- res$beta
results[i, "theta_hat"] <- res$theta
} else{
results[i, "theta_hat"] <- res$theta
}
}
}
})
return(results)
}
M = Multi_tests(N_test = 100,n_cov = 8,n_cluster = 15, n_per_cluster = 20,a1 = 0,b1 = 1)
Multi_tests = function(N_test,
n_cov,
n_cluster,
n_per_cluster,
a1,
b1)
{
suppressMessages({
n = n_cluster * n_per_cluster
results <- data.frame(matrix(NA, nrow = N_test, ncol = (n_cov + 1)))
if (n_cov > 0) {
colnames(results) <- c(paste0("beta", 1:n_cov), "theta_hat")
} else{
colnames(results) <- "theta_hat"
}
for (i in 1:N_test)
{
G <- rep(1:n_cluster, each = n_per_cluster)
if (n_cov == 0) {
Z <- matrix(0, n, 0)
} else {
Z <- matrix(runif(n * n_cov, a1, b1), ncol = n_cov)
}
df = simulate_data(
G,
Z,
prop = 0.6,
beta = c(0, 0.25, 0.12, 0.33, 0.24, 1, -0.2, -0.35),
theta = 0,
cens = TRUE,
pcens = 0.25,
tau = 0.5
)
check_data_format(df)
res <- tryCatch(
Reml_CompRisk_frailty(df, max_iter = 100),
error = function(e) {
message("Erreur à l’itération ", i, " : ", e$message)
return(NULL)
}
)
if (is.null(res)) {
res_bis <- tryCatch(
Ml_CompRisk(df, max_iter = 100),
error = function(e) {
message("Erreur à l’itération ", i, " : ", e$message)
return(NULL)})
res <- list(beta = res_bis$beta,theta = 0)
}
if (!is.null(res)) {
if (n_cov > 0) {
results[i, 1:n_cov] <- res$beta
results[i, "theta_hat"] <- res$theta
} else{
results[i, "theta_hat"] <- res$theta
}
}
}
})
return(results)
}
M = Multi_tests(N_test = 100,n_cov = 8,n_cluster = 15, n_per_cluster = 20,a1 = 0,b1 = 1)
m = compute_mean_mse(M,c(0,0.25,0.12,0.33,0.24,1,-0.2,-0.35,0))
m
devtools::build_vignettes()
vignette("Tests_Kats")
devtools::build()
devtools::check()
usethis::use_gpl3_license("Benjamin Delmas")
usethis::use_gpl3_license("Delmas")
usethis::use_gpl3_license(Delmas)
usethis::use_gpl3_license()
install.packages("covr")
library(covr)
report(package_coverage())
library(covr)
report(package_coverage(type = "both"))
