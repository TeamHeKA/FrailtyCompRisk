devtools::document()
devtools::document()
devtools::document()       # Génère NAMESPACE et les fichiers Rd
devtools::check()          # Vérifie que tout est conforme
pkgbuild::check_build_tools(debug = TRUE)
pkgbuild::check_build_tools(debug = TRUE)
devtools::document()       # Génère NAMESPACE et les fichiers Rd
devtools::check()          # Vérifie que tout est conforme
devtools::document()       # Génère NAMESPACE et les fichiers Rd
devtools::check()          # Vérifie que tout est conforme
devtools::check()          # Vérifie que tout est conforme
usethis::use_mit_license("Benjamin Delmas")
tools::showNonASCIIfile("R/Reml_CompRisk_frailty.R")
tools::showNonASCIIfile("R/Reml_Cox_frailty.R")
usethis::use_vignette("multicenterCompRisk")
devtools::check()          # Vérifie que tout est conforme
devtools::check()          # Vérifie que tout est conforme
devtools::check()          # Vérifie que tout est conforme
devtools::check()          # Vérifie que tout est conforme
devtools::check()          # Vérifie que tout est conforme
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
tools:::.check_package_description("DESCRIPTION")
tools::.check_package_description("DESCRIPTION")
tools:::.check_package_description("DESCRIPTION")
usethis::use_mit_license(name = "Benjamin Delmas, Lucas Ducrot, Sandrine Katsahian, INRIA")
usethis::use_mit_license()
devtools::document()
devtools::check()
knitr::opts_chunk$set(echo = TRUE)
install.packages("survival")
devtools::install("MulticentreCompRisk")
rlang::last_trace()
rlang::last_trace(drop = FALSE)
devtools::install("C:\Users\delbe\Total\TRAVAIL\Informatique\Stage Inria\Package")
devtools::install("C:/Users/delbe/Total/TRAVAIL/Informatique/Stage Inria/Package")
devtools::install("C:/Users/delbe/Total/TRAVAIL/Informatique/Stage Inria/Package")
library(survival)
library(multicenterCompRisk)
?multicenterCompRisk
e = TRUE
if e {print(1)}
if (e) {print(1)}
d = rnorm(6,0,1)
d
d = rnorm(1000,0,1)
mean(d)
d = rep(1:3, each = 2)
d
d = rep(1:2, each = 3)
d
n_cov = 2
n_per_cluster = 20
n_cluster = 10
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n,0,1),ncol = n_cov)
simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.1)
G
Z
n_cov = 2
n_per_cluster = 20
n_cluster = 10
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n,0,1),ncol = n_cov)
simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.1)
n_cov = 2
n_per_cluster = 20
n_cluster = 10
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.1)
View(df)
devtools::document()
devtools::check()
devtools::install("MulticentreCompRisk")
devtools::install("C:/Users/delbe/Total/TRAVAIL/Informatique/Stage Inria/Package")
library(survival)
library(multicenterCompRisk)
devtools::document()
remove.packages("multicenterCompRisk")
devtools::document()
devtools::document()
remove.packages("multicenterCompRisk")
devtools::document()
search()
devtools::clean_dll()
devtools::document()
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(survival)
library(multicenterCompRisk)
n_cov = 2
n_per_cluster = 20
n_cluster = 10
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.1)
View(df)
devtools::document()            # Met à jour la doc à partir des roxygen comments
devtools::install(build_vignettes = TRUE)  # Réinstalle le package
devtools::load_all()
knitr::opts_chunk$set(echo = TRUE)
n_cov = 2
n_per_cluster = 70
n_cluster = 25
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.3,cens = TRUE)
library(survival)
library(multicenterCompRisk)
n_cov = 2
n_per_cluster = 70
n_cluster = 25
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.3,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty",cluster_censoring = TRUE)
debug(Reml_CompRisk_frailty)
Reml_CompRisk_frailty(df)
devtools::load_all()
Parameters_estimation(df,method = "CompRisk_frailty",cluster_censoring = TRUE)
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
Parameters_estimation(df,method = "CompRisk_frailty",cluster_censoring = TRUE)
packageVersion("Matrix")
devtools::document()
devtools::load_all()
Parameters_estimation(df,method = "CompRisk_frailty",cluster_censoring = TRUE)
g()
options(repos = c(RSPM = "https://packagemanager.posit.co/cran/latest"))
options(repos = c(RSPM = "https://packagemanager.posit.co/cran/latest"))
sessionInfo()
n_cov = 2
n_per_cluster = 70
n_cluster = 25
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2),theta = 0.3,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty",cluster_censoring = TRUE)
options(mc.cores = parallel::detectCores())
data.table::setDTthreads(0)
install.packages("data.table")
install.packages("data.table")
install.packages("data.table")
options(repos = c(CRAN = "https://cloud.r-project.org"))
install.packages("data.table")
unlink(tempdir(), recursive = TRUE)
devtools::document()
devtools::load_all()
knitr::opts_chunk$set(echo = TRUE)
n_cov = 8
n_per_cluster = 100
n_cluster = 250
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2,-0.2,-0.6,0,0.7,-0.2,0.4),theta = 0.3,cens = TRUE)
n_cov = 8
n_per_cluster = 10
n_cluster = 25
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2,-0.2,-0.6,0,0.7,-0.2,0.4),theta = 0.3,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty")
debug(Ml_Cox_frailty)
debug(Ml_Cox)
Ml_Cox(df)
devtools::document()
devtools::load_all()
debug(Ml_Cox)
Ml_Cox(df)
devtools::install("C:/Users/delbe/Total/TRAVAIL/Informatique/Stage Inria/Package")
library(survival)
library(multicenterCompRisk)
n_cov = 8
n_per_cluster = 10
n_cluster = 25
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2,-0.2,-0.6,0,0.7,-0.2,0.4),theta = 0.3,cens = TRUE)
n_cov = 8
n_per_cluster = 10
n_cluster = 25
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2,-0.2,-0.6,0,0.7,-0.2,0.4),theta = 0.3,cens = TRUE)
devtools::document()
knitr::opts_chunk$set(echo = TRUE)
devtools::install("C:/Users/delbe/Total/TRAVAIL/Informatique/Stage Inria/Package")
library(survival)
library(multicenterCompRisk)
n_cov = 8
n_per_cluster = 10
n_cluster = 25
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2,-0.2,-0.6,0,0.7,-0.2,0.4),theta = 0.3,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty")
n_cov = 8
n_per_cluster = 10
n_cluster = 25
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2,-0.2,-0.6,0,0.7,-0.2,0.4),theta = 0.3,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty")
n_cov = 8
n_per_cluster = 10
n_cluster = 25
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2,-0.2,-0.6,0,0.7,-0.2,0.4),theta = 0.3,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty")
n_cov = 8
n_per_cluster = 10
n_cluster = 25
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2,-0.2,-0.6,0,0.7,-0.2,0.4),theta = 0.3,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty")
n_cov = 8
n_per_cluster = 10
n_cluster = 25
n = n_cluster * n_per_cluster
G = rep(1:n_cluster, each = n_per_cluster)
Z = matrix(rnorm(n*n_cov,0,1),ncol = n_cov)
df = simulate_data(G,Z,prop = 0.6,beta = c(1,1.2,-0.2,-0.6,0,0.7,-0.2,0.4),theta = 0.3,cens = TRUE)
Parameters_estimation(df,method = "CompRisk_frailty")
